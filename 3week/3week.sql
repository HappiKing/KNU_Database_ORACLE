-- 4-1) EMP 테이블 구성 살펴보기 
DESC EMP;

-- 4-2) DEPT 테이블 구성 살펴보기 
DESC DEPT;

-- 4-3) SALGRADE 테이블 구성 살펴보기 
DESC SALGRADE;

-- 4-4) EMP 테이블 전체 열 조회하기 
SELECT * FROM EMP;

-- 4-5) 열을 쉼표로 구분하여 출력하기 
SELECT EMPNO, ENAME, DEPTNO FROM EMP;

-- 4-6) DISTINCT로 열의 중복 제거하기 
SELECT DISTINCT DEPTNO FROM EMP;

-- 4-7) 여러 개 열을 명시하여 중복 제거하기 
SELECT DISTINCT JOB, DEPTNO FROM EMP;

-- 4-8) 직책, 부서 번호 출력하기(ALL사용) 
SELECT ALL JOB, DEPTNO FROM EMP;

-- 4-9) 열에 연산식을 사용하여 출력하기 
SELECT ENAME, SAL, SAL*12+COMM, COMM FROM EMP;

-- 4-10) 곱하기를 사용하지 않고 사원의 연간 총 수입 출력하기 
SELECT ENAME, SAL, SAL+SAL+SAL+SAL+SAL+SAL+SAL+SAL+SAL+SAL+SAL+SAL+COMM, COMM FROM EMP;

-- 4-11) 별칭을 사용하여 사원의 연간 총 수입 출력하기 
SELECT ENAME, SAL, SAL*12+COMM AS ANNSAL, COMM FROM EMP;

-- 4-12) EMP 테이블의 모든 열을 급여 기준으로 오름차순 정렬하기 
SELECT * FROM EMP ORDER BY SAL;

-- 4-13) EMP 테이블의 모든 열을 급여 기준으로 내림차순 정렬하기 
SELECT * FROM EMP ORDER BY SAL DESC;

-- 4-14) EMP 테이블의 전체 열을 부서 번호(오름차순)와 급여(내림차순)로 정렬하기 
SELECT * FROM EMP ORDER BY DEPTNO ASC, SAL DESC;

-- 5-1) EMP 테이블의 모든 열 출력하기 
SELECT * FROM EMP;

-- 5-2) 부서 번호가 30인 데이터만 출력하기 
SELECT * FROM EMP WHERE DEPTNO=30;

-- 5-3) AND 연산자로 여러 개의 조건식 사용하기 
SELECT * FROM EMP WHERE DEPTNO=30 AND JOB='SALESMAN';

-- 5-4) OR 연산자로 여러 개의 출력 조건 사용하기 
SELECT * FROM EMP WHERE DEPTNO=30 OR JOB='CLERK';

-- 5-5) 곱셈 산술 연산자를 사용한 예 
SELECT * FROM EMP WHERE SAL*12 = 36000;

-- 5-6) 대소 비교 연산자를 사용하여 출력하기 
SELECT * FROM EMP WHERE SAL>=3000;

-- 5-7) 문자를 대소 비교 연산자로 비교하기(비교 문자열이 문자 하나일 때)
SELECT * FROM EMP WHERE ENAME >= 'F';

-- 5-8) 문자열을 대소 비교 연산자로 비교하기(비교 문자열이 문자 여러 개일 때)
SELECT * FROM EMP WHERE ENAME <= 'FORZ';

-- 5-9) 등가 비교 연산자(!=)를 사용하여 출력하기 
SELECT * FROM EMP WHERE SAL != 3000;

-- 5-10) 등가 비교 연산자(<>)를 사용하여 출력하기 
SELECT * FROM EMP WHERE SAL <> 3000;

-- 5-11) 등가 비교 연산자(^=)를 사용하여 출력하기 
SELECT * FROM EMP WHERE SAL ^= 3000;

-- 5-12) NOT 연산자를 사용하여 출력하기 
SELECT * FROM EMP WHERE NOT SAL = 3000;

-- 5-13) OR 연산자를 사용하여 여러 개 조건을 만족하는 데이터를 출력하기 
SELECT * FROM EMP WHERE JOB = 'MANAGER' OR JOB = 'SALESMAN' OR JOB = 'CLERK';

-- 5-14) IN 연산자를 사용하여 출력하기 
SELECT * FROM EMP WHERE JOB IN('MANAGER', 'SALESMAN', 'CLERK');

-- 5-15) 등가 비교 연산자와 AND 연산자를 사용하여 출력하기 
SELECT * FROM EMP WHERE JOB != 'MANAGER' AND JOB <> 'SALESMAN' AND JOB ^= 'CLERK';

-- 5-16) IN 연산자와 논리 부정 연산자를 사용하여 출력하기 
SELECT * FROM EMP WHERE JOB NOT IN('MANAGER', 'SALESMAN', 'CLERK');

-- 5-17) 대소 비교 연산자와 AND 연산자를 사용하여 출력하기 
SELECT * FROM EMP WHERE SAL >= 2000 AND SAL <= 3000;

-- 5-18) BETWEEN A AND B 연산자를 사용하여 출력하기 
SELECT * FROM EMP WHERE SAL BETWEEN 2000 AND 3000;

-- 5-19) BETWEEN A AND B 연산자와 NOT 연산자를 사용하여 출력하기 
SELECT * FROM EMP WHERE SAL NOT BETWEEN 2000 AND 3000;

-- 5-20) LIKE 연산자 사용하여 출력하기 
SELECT * FROM EMP WHERE ENAME LIKE 'S%';

-- 5-21) 사원 이름의 두 번째 글자가 L인 사원만 출력하기 
SELECT * FROM EMP WHERE ENAME LIKE '_L%';

-- 5-22) 사원 이름에 AM이 포함되어 있는 사원 데이터만 출력하기 
SELECT * FROM EMP WHERE ENAME LIKE '%AM%';

-- 5-23) 사원 이름에 AM이 포함되어 있지 않은 사원 데이터 출력하기 
SELECT * FROM EMP WHERE ENAME NOT LIKE '%AM%';

-- 5-24) 별칭을 사용하여 열 이름 출력하기 
SELECT ENAME, SAL, SAL*12+COMM AS ANNSAL, COMM FROM EMP;

-- 5-25) 등가 비교 연산자로 NULL 비교하기 
SELECT * FROM EMP WHERE COMM = NULL;

-- 5-26) IS NULL 연산자를 사용하여 출력하기 
SELECT * FROM EMP WHERE COMM IS NULL;

-- 5-27) 직속 상관이 있는 사원 데이터만 출력하기 
SELECT * FROM EMP WHERE MGR IS NOT NULL;

-- 5-28) AND 연산자와 IS NULL 연산자 사용하기 
SELECT * FROM EMP WHERE SAL > NULL AND COMM IS NULL;

-- 5-29) OR 연산자와 IS NULL 연산자 사용하기 
SELECT * FROM EMP WHERE SAL > NULL OR COMM IS NULL;

-- 5-30) 집합 연산자(UNION)를 사용하여 출력하기 
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 10
UNION
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 20;

-- 5-31) 집합 연산자(UNION)를 사용하여 출력하기(출력 열 개수가 다를 때)
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 10
UNION
SELECT EMPNO, ENAME, SAL FROM EMP WHERE DEPTNO = 20;

-- 5-32) 집합 연산자(UNION)를 사용하여 출력하기(출력 열의 자료형이 다를 때)
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 10
UNION
SELECT ENAME, EMPNO, DEPTNO, SAL FROM EMP WHERE DEPTNO = 20;

-- 5-33) 집합 연산자(UNION)를 사용하여 출력하기(출력 열 개수와 자료형이 같을 때)
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 10
UNION
SELECT SAL, JOB, DEPTNO, SAL FROM EMP WHERE DEPTNO = 20;

-- 5-34) 집합 연산자(UNION)를 사용하여 출력하기(출력 결과 데이터가 같을 때)
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 10
UNION
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 10;

-- 5-35) 집합 연산자(UNION ALL)를 사용하여 출력하기(출력 결과 데이터가 같을 때)
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 10
UNION ALL
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 10;

-- 5-36) 집합 연산자(MINUS)를 사용하여 출력하기 
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
MINUS
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 10;

-- 5-37) 집합 연산자(INTERSECT)를 사용하여 출력하기 
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP
INTERSECT
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP WHERE DEPTNO = 10;

-- 6-1) UPPER, LOWER, INITCAP 함수 사용하기
SELECT ENAME, UPPER(ENAME), LOWER(ENAME), INITCAP(ENAME) FROM EMP;

-- 6-2) UPPER 함수로 문자열 비교하기(사원 이름이 SCOTT인 데이터 찾기)
SELECT * FROM EMP WHERE UPPER(ENAME) = UPPER('scott');

-- 6-3) UPPER 함수로 문자열 비교하기(사원 이름이 SCOTT 단어를 포함 데이터 찾기)
SELECT * FROM EMP WHERE UPPER(ENAME) LIKE UPPER('%scott%');

-- 6-4) 선택한 열의 문자열 길이 구하기 
SELECT ENAME, LENGTH(ENAME) FROM EMP;

-- 6-5) 사원 이름의 길이가 5 이상인 행 출력하기 
SELECT ENAME, LENGTH(ENAME) FROM EMP WHERE LENGTH(ENAME) >= 5;

-- 6-6) LENGTH 함수와 LENGTHB 함수 비교하기 
SELECT LENGTH('한글'), LENGTHB('한글') FROM DUAL;

-- 6-7) SUBSTR 함수를 사용하는 예 
SELECT JOB, SUBSTR(JOB, 1, 2), SUBSTR(JOB, 3, 2), SUBSTR(JOB, 5) FROM EMP;

-- 6-8) SUBSTR 함수 안에 다른 함수(LENGTH) 함께 사용하기 
SELECT JOB, SUBSTR(JOB, -LENGTH(JOB)), SUBSTR(JOB, -LENGTH(JOB), 2), SUBSTR(JOB, -3) FROM EMP;

-- 6-9) INSTR 함수로 문자열 데이터에서 특정 문자열 찾기
SELECT INSTR('HELLO, ORACLE!', 'L') AS INSTR_1,
       INSTR('HELLO, ORACLE!', 'L', 5) AS INSTR_2,
       INSTR('HELLO, ORACLE!', 'L', 2, 2) AS INSTR_3
FROM DUAL;

-- 6-10) INSTR 함수로 사원 이름에 문자 S가 있는 행 구하기
SELECT * FROM EMP WHERE INSTR(ENAME, 'S') > 0;

-- 6-11) LIKE 연산자로 사원 이름에 문자 S가 있는 행 구하기
SELECT * FROM EMP WHERE ENAME LIKE '%S%';

-- 6-12) REPLACE 함수로 문자열 안에 있는 특정 문자 바꾸기
SELECT '010-1234-5678' AS REPLACE_BEFORE, REPLACE('010-1234-5678', '-', ' ') AS REPLACE_1, REPLACE('010-1234-5678', '-') AS REPLACE_2 FROM DUAL;

-- 6-13) LPAD, RPAD 함수 사용하여 출력하기
SELECT 'Oracle', LPAD('Oracle', 10, '#') AS LPAD_1,
                 RPAD('Oracle', 10, '*') AS RPAD_1,
                 LPAD('Oracle', 10) AS LPAD_2,
                 RPAD('Oracle', 10) AS RPAD_2
FROM DUAL;

-- 6-14) RPAD 함수를 사용하여 개인정보 뒷자리 * 표시로 출력하기
SELECT RPAD('971225-', 14, '*') AS RPAD_JMNO,
       RPAD('010-1234-',13, '*') AS RPAD_PHONE
FROM DUAL;

-- 6-15) 두 열 사이에 콜론(:) 넣고 연결하기
SELECT CONCAT(EMPNO, ENAME), CONCAT(EMPNO, CONCAT(' : ', ENAME)) FROM EMP WHERE ENAME = 'SCOTT';

-- 6-16) TRIM 함수로 공백 제거하여 출력하기
SELECT '[' || TRIM(' _ _Oracle_ _ ') || ']' AS TRIM,
       '[' || TRIM(LEADING FROM ' _ _Oracle_ _ ') || ']' AS TRIM_LEADING,
       '[' || TRIM(TRAILING FROM ' _ _Oracle_ _ ') || ']' AS TRIM_TRAILING,
       '[' || TRIM(BOTH FROM ' _ _Oracle_ _ ') || ']' AS TRIM_BOTH
FROM DUAL;

-- 6-17) TRIM 함수로 삭제할 문자 _ 삭제 후 출력하기
SELECT '[' || TRIM('_' FROM '_ _Oracle_ _') || ']' AS TRIM,
       '[' || TRIM(LEADING '_' FROM '_ _Oracle_ _') || ']' AS TRIM_LEADING,
       '[' || TRIM(TRAILING '_' FROM '_ _Oracle_ _') || ']' AS TRIM_TRAILING,
       '[' || TRIM(BOTH '_' FROM '_ _Oracle_ _') || ']' AS TRIM_BOTH
FROM DUAL;

-- 6-18) TRIM, LTRIM, RTRIM 사용하여 문자열 출력하기
SELECT '[' || TRIM(' _Oracle_ ') || ']' AS TRIM,
       '[' || LTRIM(' _Oracle_ ') || ']' AS LTRIM,
       '[' || LTRIM('<_Oracle_>', '_<') || ']' AS LTRIM_2,
       '[' || RTRIM(' _Oracle_ ') || ']' AS RTRIM,
       '[' || RTRIM('<_Oracle_>', '>_') || ']' AS RTRIM_2
FROM DUAL;

-- 6-19) ROUND 함수를 사용하여 반올림된 숫자 출력하기
SELECT ROUND(1234.5678) AS ROUND,
       ROUND(1234.5678, 0) AS ROUND_0,
       ROUND(1234.5678, 1) AS ROUND_1,
       ROUND(1234.5678, 2) AS ROUND_2,
       ROUND(1234.5678, -1) AS ROUND_MINUS1,
       ROUND(1234.5678, -2) AS ROUND_MINUS2
FROM DUAL;

-- 6-20) ROUND 함수를 사용하여 반올림된 숫자 출력하기
SELECT TRUNC(1234.5678) AS TRUNC,
       TRUNC(1234.5678, 0) AS TRUNC_0,
       TRUNC(1234.5678, 1) AS TRUNC_1,
       TRUNC(1234.5678, 2) AS TRUNC_2,
       TRUNC(1234.5678, -1) AS TRUNC_MINUS1,
       TRUNC(1234.5678, -2) AS TRUNC_MINUS2
FROM DUAL;

-- 6-21) CEIL, FLOOR 함수로 숫자 출력하기
SELECT CEIL(3.14), FLOOR(3.14), CEIL(-3.14), FLOOR(-3.14) FROM DUAL;

-- 6-22) MOD 함수를 사용하여 나머지 값 출력하기
SELECT MOD(15, 6), MOD(10, 2), MOD(11, 2) FROM DUAL;

-- 6-23) SYSDATE 함수를 사용하여 날짜 출력하기
SELECT SYSDATE AS NOW, SYSDATE-1 AS YESTERDAY, SYSDATE+1 AS TOMORROW FROM DUAL;

-- 6-24) SYSDATE와 ADD_MONTHS 함수로 3개월 후 날짜 구하기
SELECT SYSDATE, ADD_MONTHS(SYSDATE, 3) FROM DUAL;

-- 6-25) 입사 10주년이 되는 사원들 데이터 출력하
SELECT EMPNO, ENAME, HIREDATE, ADD_MONTHS(HIREDATE, 120) AS WORK10YEAR FROM EMP;

-- 6-26) 입사 42.5년 미만인 사원 데이터 출력하기
SELECT EMPNO, ENAME, HIREDATE, SYSDATE FROM EMP WHERE ADD_MONTHS(HIREDATE, 510) > SYSDATE;

-- 6-27) HIREDATE와 SYSDATE 사이의 개월 수를 MONTHS_BETWEEN 함수로 출력하기
SELECT EMPNO, ENAME, HIREDATE, SYSDATE,
       MONTHS_BETWEEN(HIREDATE, SYSDATE) AS MONTH1,
       MONTHS_BETWEEN(SYSDATE, HIREDATE) AS MONTH2,
       TRUNC(MONTHS_BETWEEN(SYSDATE, HIREDATE)) AS MONTH3
FROM EMP;

-- 6-28) NEXT_DAY, LAST_DAY 함수를 사용하여 출력하기
SELECT SYSDATE, NEXT_DAY(SYSDATE, '월요일'), LAST_DAY(SYSDATE) FROM DUAL;

-- 6-29) ROUND 함수 사용하여 날짜 데이터 출력하기
SELECT SYSDATE,
       ROUND(SYSDATE, 'CC') AS FORMAT_CC,
       ROUND(SYSDATE, 'YYYY') AS FORMAT_YYYY,
       ROUND(SYSDATE, 'Q') AS FORMAT_Q,
       ROUND(SYSDATE, 'DDD') AS FORMAT_DDD,
       ROUND(SYSDATE, 'HH') AS FORMAT_HH
FROM DUAL;

-- 6-30) TRUNC 함수 사용하여 날짜 데이터 출력하기
SELECT SYSDATE,
       TRUNC(SYSDATE, 'CC') AS TRUNC_CC,
       TRUNC(SYSDATE, 'YYYY') AS TRUNC_YYYY,
       TRUNC(SYSDATE, 'Q') AS TRUNC_Q,
       TRUNC(SYSDATE, 'DDD') AS TRUNC_DDD,
       TRUNC(SYSDATE, 'HH') AS TRUNC_HH
FROM DUAL;

-- 6-31) 숫자와 문자열(숫자)을 더하여 출력하기
SELECT EMPNO, ENAME, EMPNO + '500' FROM EMP WHERE ENAME = 'SCOTT';

-- 6-32) 문자열(문자)과 숫자를 더하여 출력하기
SELECT 'ABCD' + EMPNO, EMPNO FROM EMP WHERE ENAME = 'SCOTT';

-- 6-33) SYSDATE 날짜 형식 지정하여 출력하기
SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD HH24:MI:SS') AS 현재날짜시간 FROM DUAL;

-- 6-34) 월과 요일을 다양한 형식으로 출력하기
SELECT SYSDATE,
       TO_CHAR(SYSDATE, 'MM') AS MM,
       TO_CHAR(SYSDATE, 'MON') AS MON,
       TO_CHAR(SYSDATE, 'MONTH') AS MONTH,
       TO_CHAR(SYSDATE, 'DD') AS DD,
       TO_CHAR(SYSDATE, 'DY') AS DY,
       TO_CHAR(SYSDATE, 'DAY') AS DAY
FROM DUAL;

-- 6-35) 여러 언어로 날짜(월) 출력하기 
SELECT SYSDATE,
       TO_CHAR(SYSDATE, 'MM') AS MM,
       TO_CHAR(SYSDATE, 'MON', 'NLS_DATE_LANGUAGE = KOREAN') AS MON_KOR,
       TO_CHAR(SYSDATE, 'MON', 'NLS_DATE_LANGUAGE = JAPANESE') AS MON_JPN,
       TO_CHAR(SYSDATE, 'MON', 'NLS_DATE_LANGUAGE = ENGLISH') AS MON_ENG,
       TO_CHAR(SYSDATE, 'MONTH', 'NLS_DATE_LANGUAGE = KOREAN') AS MONTH_KOR,
       TO_CHAR(SYSDATE, 'MONTH', 'NLS_DATE_LANGUAGE = JAPANESE') AS MONTH_JPN,
       TO_CHAR(SYSDATE, 'MONTH', 'NLS_DATE_LANGUAGE = ENGLISH') AS MONTH_ENG
FROM DUAL;
       
       
-- 6-36) 여러 언어로 날짜(요일) 출력하기 
SELECT SYSDATE, 
       TO_CHAR(SYSDATE, 'MM'),
       TO_CHAR(SYSDATE, 'DD'),
       TO_CHAR(SYSDATE, 'DY', 'NLS_DATE_LANGUAGE = KOREAN') AS DY_KOR,
       TO_CHAR(SYSDATE, 'DY', 'NLS_DATE_LANGUAGE = JAPANESE') AS DY_JPN,
       TO_CHAR(SYSDATE, 'DY', 'NLS_DATE_LANGUAGE = ENGLISH') AS DY_ENG,
       TO_CHAR(SYSDATE, 'DAY', 'NLS_DATE_LANGUAGE = KOREAN') AS DAY_KOR,
       TO_CHAR(SYSDATE, 'DAY', 'NLS_DATE_LANGUAGE = JAPANESE') AS DAY_JPN,
       TO_CHAR(SYSDATE, 'DAY', 'NLS_DATE_LANGUAGE = ENGLISH') AS DAY_ENG
FROM DUAL;

-- 6-37) SYSDATE 시간 형식 지정하여 출력하기 
SELECT SYSDATE,
       TO_CHAR(SYSDATE, 'HH24:MI:SS') AS HH24MISS,
       TO_CHAR(SYSDATE, 'HH12:MI:SS AM') AS HHMISS_AM,
       TO_CHAR(SYSDATE, 'HH:MI:SS P.M.') AS HHMISS_PM
FROM DUAL;

-- 6-38) 여러 가지 숫자 형식을 사용하여 급여 출력하기
SELECT SAL,
       TO_CHAR(SAL, '$999,999') AS SAL_$,
       TO_CHAR(SAL, 'L999,999') AS SAL_L,
       TO_CHAR(SAL, '999,999.00') AS SAL_1,
       TO_CHAR(SAL, '000,999,999.00') AS SAL_2,
       TO_CHAR(SAL, '000999999.99') AS SAL_3,
       TO_CHAR(SAL, '999,999,00') AS SAL_4
FROM EMP;

-- 6-39) 문자 데이터와 숫자 데이터를 연산하여 출력하기
SELECT 1300 - '1500', '1300' + 1500 FROM DUAL;

-- 6-40) 문자 데이터끼리 연산하여 출력하기
SELECT '1,300' - '1,500' FROM DUAL;

-- 6-41) TO_NUMBER 함수로 연산하여 출력하기
SELECT TO_NUMBER('1,300', '999,999') - TO_NUMBER('1,500', '999,999') FROM DUAL;

-- 6-42) TO_DATE 함수로 문자 데이터를 날짜 데이터 변환하기
SELECT TO_DATE('2018-07-14', 'YYYY-MM-DD') AS TODATE1,
       TO_DATE('20180714', 'YYYY_MM_DD') AS TODATE2
FROM DUAL;

-- 6-43) 1981년 6월 1일 이후에 입사한 사원 정보 출력하기 
SELECT * FROM EMP WHERE HIREDATE > TO_DATE('1981/06/01', 'YYYY/MM/DD');

-- 6-44) 여러 각지 형식으로 날짜 데이터 출력하기
SELECT TO_DATE('49/12/10', 'YY/MM/DD') AS YY_YEAR_49,
       TO_DATE('49/12/10', 'RR/MM/DD') AS RR_YEAR_49,
       TO_DATE('50/12/10', 'YY/MM/DD') AS YY_YEAR_50,
       TO_DATE('50/12/10', 'RR/MM/DD') AS RR_YEAR_50,
       TO_DATE('51/12/10', 'YY/MM/DD') AS YY_YEAR_51,
       TO_DATE('51/12/10', 'RR/MM/DD') AS RR_YEAR_51
FROM DUAL;

-- 6-45) NVL 함수를 사용하여 출력하기
SELECT EMPNO, ENAME, SAL, COMM, SAL+COMM,
       NVL(COMM, 0),
       SAL+NVL(COMM,0)
FROM EMP;

-- 6-46) NVL2 함수를 사용하여 출력하기
SELECT EMPNO, ENAME, COMM,
       NVL2(COMM, 'O', 'X'),
       NVL2(COMM, SAL*12+COMM, SAL*12) AS ANNSAL
FROM EMP;

-- 6-47) DECODE 함수를 사용하여 출력하기
SELECT EMPNO, ENAME, JOB, SAL,
       DECODE(JOB,
              'MANAGER', SAL*1.1,
              'SALESMAN', SAL*1.05,
              'ANALYST', SAL,
              SAL*1.03) AS UPSAL
FROM EMP;

-- 6-48) CASE 문을 사용하여 출력하기
SELECT EMPNO, ENAME, JOB, SAL,
    CASE JOB
        WHEN 'MANAGER' THEN SAL*1.1
        WHEN 'SALESMAN' THEN SAL*1.05
        WHEN 'ANALYST' THEN SAL
        ELSE SAL*1.03
    END AS UPSAL
FROM EMP;

-- 6-49) 열 값에 따라서 출력 값이 달라지는 CASE 문
SELECT EMPNO, ENAME, COMM,
    CASE
        WHEN COMM IS NULL THEN '해당사항 없음'
        WHEN COMM = 0 THEN '수당없음'
        WHEN COMM > 0 THEN ' 수당 : ' || COMM
    END AS COMM_TEXT
FROM EMP;

-- 4장 잊기전에 한 번 더
-- Q2
SELECT DISTINCT JOB FROM EMP;

-- Q3
SELECT EMPNO AS EMPLOYEE_NO, ENAME AS EMPLOYEE_NAME, MGR AS MANAGER, SAL AS SALARY, COMM AS COMMISSION, DEPTNO AS DEPARTMENT_NO FROM EMP ORDER BY DEPTNO DESC, ENAME ASC;

-- 5장 잊기전에 한 번 더
-- Q1
SELECT * FROM EMP WHERE ENAME LIKE '%S';

-- Q2
SELECT EMPNO, ENAME, JOB, SAL, DEPTNO FROM EMP WHERE DEPTNO = 30 AND JOB='SALESMAN';

-- Q3(집합 연산자 사용 X)
SELECT EMPNO, ENAME, JOB, SAL, DEPTNO FROM EMP WHERE DEPTNO != 10 AND SAL>=2000;

-- Q3(집합 연산자 사용)
SELECT EMPNO, ENAME, JOB, SAL, DEPTNO FROM EMP WHERE DEPTNO = 20 AND SAL>=2000
UNION
SELECT EMPNO, ENAME, JOB, SAL, DEPTNO FROM EMP WHERE DEPTNO = 30 AND SAL>=2000;

-- Q4
SELECT * FROM EMP WHERE NOT(SAL >= 2000 AND SAL <= 3000);

-- Q5
SELECT ENAME, EMPNO, SAL, DEPTNO FROM EMP WHERE ENAME LIKE '%E%' AND DEPTNO = 30 AND NOT(SAL BETWEEN 1000 AND 2000);

-- Q6
SELECT * FROM EMP WHERE COMM IS NULL AND MGR IS NOT NULL AND JOB IN('MANAGER', 'CLERK') AND NOT (ENAME LIKE '_L%');

-- 6장
-- Q1
